version: 2.1

orbs:
  snyk: snyk/snyk@2.2.0
  aws-cli: circleci/aws-cli@4.1.3 # use v4 of this orb
  aws-ecr: circleci/aws-ecr@9.0.2 # this orb doesn't support OIDC v2, so we use aws-cli to authenticate
  crime-forms-end-to-end-tests: ministryofjustice/crime-forms-end-to-end-tests@volatile
  slack: circleci/slack@4.13.3
  helm: circleci/helm@3.0.2

executors:
  cloud-platform-executor:
    resource_class: small
    docker:
      - image: ministryofjustice/cloud-platform-tools:2.9.9
        environment:
          GITHUB_TEAM_NAME_SLUG: laa-crime-forms-team
          REPO_NAME: laa-crime-application-store
  test-executor:
    working_directory: ~/repo
    docker:
      - image: cimg/ruby:3.4.7-browsers
        environment:
          RACK_ENV: test
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:circleci@127.0.0.1:5432/laa_crime_application_store_test
          TZ: Europe/London
      - image: cimg/postgres:16.4-postgis
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: "circleci"
          POSTGRES_DB: laa_crime_application_store_test

references:
  authenticate_k8s: &authenticate_k8s
    run:
      name: Authenticate K8s
      command: |
          echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./ca.crt
          kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=${K8S_CLUSTER_NAME}
          kubectl config set-credentials circleci --token=${K8S_TOKEN}
          kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_NAMESPACE}
          kubectl config use-context ${K8S_CLUSTER_NAME}
          kubectl --namespace=${K8S_NAMESPACE} get pods

  _install-yamllint: &install-yamllint
    run:
      name: Install yamllint to use to check yaml formatting issues
      command: |
        sudo apt update
        sudo apt install -y python3-pip
        pip install yamllint

commands:
  install-requirements:
    steps:
      - restore_cache:
          keys:
            - v1-bundle-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-bundle-
      - run:
          name: Install gems
          command: |
            bundler_version=$(cat Gemfile.lock | tail -1 | tr -d " ")
            gem install bundler -v $bundler_version
            bundle config set path 'vendor/bundle'
            bundle check || bundle install --jobs=4 --retry=3
            bundle clean --force
      - save_cache:
          key: v1-bundle-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - ~/.bundle
            - vendor/bundle

  db-setup:
    steps:
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: |
            RUBYOPT=-W:no-deprecated \
            bundle exec rails db:prepare --trace

  run-tests:
    steps:
      - db-setup
      - run:
          name: Run rspec tests
          command: |
            TESTFILES=$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings --timings-type=filename)
            RUBYOPT=-W:no-deprecated \
            bundle exec rspec \
              --format progress \
              --format RspecJunitFormatter \
              --out /tmp/test-results/rspec/rspec.xml \
              -- ${TESTFILES}
      - store_test_results:
          path: /tmp/test-results/rspec
      - run:
          name: Stash coverage results
          command: |
            mkdir coverage_results
            cp -R coverage/.resultset.json coverage_results/.resultset-${CIRCLE_NODE_INDEX}.json
      - persist_to_workspace:
          root: .
          paths:
            - coverage_results
      - store_artifacts:
          path: ~/repo/coverage
          destination: coverage

  run-rubocop:
    steps:
      - run:
          name: Run rubocop
          command: bundle exec rubocop


  # using a more recent version of yamllink so we can use the key_duplicates rule
  # https://yamllint.readthedocs.io/en/stable/rules.html#module-yamllint.rules.key_duplicates

  lint-and-verify-helm-config:
      description:
      parameters:
        environment:
          description: Name of environment to check helm template of
          type: string
      steps:
        - run:
            name: Lint helm chart for <<parameters.environment>>
            command: helm lint helm_deploy --values helm_deploy/values-<<parameters.environment>>.yaml
        - run:
            name: Check helm template for <<parameters.environment>>
            command: helm template --debug helm_deploy --values helm_deploy/values-development.yaml | yamllint -


  build-docker-image-for-scan:
    steps:
      - run:
          name: Build docker image for app
          command: |
              docker build \
                --build-arg APP_BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z) \
                --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1} \
                --build-arg APP_BUILD_TAG="app-${CIRCLE_SHA1}" \
                --build-arg APP_BRANCH_NAME=${CIRCLE_BRANCH} \
                --pull \
                --tag app \
                --file Dockerfile .

  deploy_to_environment:
    description: >
      Deploy image to the specified environment
    parameters:
      environment:
        description: Name of environment to deploy to
        type: string
      registry:
        description: Location of ECR Images
        type: string
        default: ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com
    steps:
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME
          region: $ECR_REGION
      - checkout
      - *authenticate_k8s
      - run:
            name: Deploy to << parameters.environment >>
            command: |
              ./bin/deploy << parameters.environment >>

jobs:
  lint-app:
    working_directory: ~/repo
    executor: test-executor
    steps:
      - checkout
      - install-requirements
      - *install-yamllint
      - run-rubocop
      - helm/install_helm_client:
        version: 3.7.2
      - lint-and-verify-helm-config:
          environment: development
      - lint-and-verify-helm-config:
          environment: uat
      - lint-and-verify-helm-config:
          environment: production

  test-app:
    working_directory: ~/repo
    executor: test-executor
    steps:
      - checkout
      - install-requirements
      - run-tests

  scan-docker-image:
    executor: test-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - build-docker-image-for-scan
      - snyk/install:
          token-variable: SNYK_TOKEN
      - run:
          name: Run static code analysis
          command: snyk code test --severity-threshold=high
      - run:
          name: Test open source dependencies
          command: snyk test --all-projects --policy-path=.snyk --severity-threshold=high
      - run:
          name: Monitor for open source vulnerabilities and license issues
          command: snyk monitor --all-projects
      - run:
          name: Scan container image for vulnerabilities
          command: snyk container test app --file=./Dockerfile --policy-path=.snyk --severity-threshold=high
      - run:
          name: Monitor container image for vulnerabilities
          command: snyk container monitor app
      - helm/install_helm_client:
          version: 3.7.2
      - run:
          name: Test IaC files
          command: |
            # render k8s manifests from helm templates
            helm template ./helm_deploy --output-dir ./output --values helm_deploy/values-production.yaml

            snyk iac test ./output --report --policy-path=.snyk --severity-threshold=high

  scan-metabase-docker-image:
    executor: test-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - snyk/install:
          token-variable: SNYK_TOKEN
      - run:
          name: Install yq
          command: |
            sudo wget https://github.com/mikefarah/yq/releases/download/v4.40.5/yq_linux_amd64 -O /usr/bin/yq
            sudo chmod a+x /usr/bin/yq
      - run:
          name: Scan container image for vulnerabilities (UAT)
          command: snyk container test $(cat helm_deploy/values-uat.yaml | yq '.metabase.image') --policy-path=.snyk --severity-threshold=high
      - run:
          name: Scan container image for vulnerabilities (Production)
          command: snyk container test $(cat helm_deploy/values-production.yaml | yq '.metabase.image') --policy-path=.snyk --severity-threshold=high
      - run:
          name: Monitor container image for vulnerabilities (Production)
          command: snyk container monitor $(cat helm_deploy/values-production.yaml | yq '.metabase.image')

  build-and-push:
    executor: aws-ecr/default # use the aws-ecr/default executor to start the docker daemon
    steps:
      - checkout
      # Authenticate to AWS using OIDC v2 with the AWS CLI
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME
          region: $ECR_REGION
      # Authenticate to the ECR repository using the standard command
      - run: |
          aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com
      - run:
          name: Set ECR_TAGS environment variable for use in next step
          command: |
            [[ "$CIRCLE_BRANCH" == "main" ]] && ECR_TAGS="main-$CIRCLE_SHA1,latest" || ECR_TAGS="branch-$CIRCLE_SHA1"
            echo "export ECR_TAGS=$ECR_TAGS" >> "$BASH_ENV"
            echo "export APP_BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z)" >> "$BASH_ENV"
            source "$BASH_ENV"
      # Build and push your Docker image
      - aws-ecr/build_image:
          push_image: true
          tag: ${ECR_TAGS}
          region: $ECR_REGION # this will use the env var
          repo: $ECR_REPOSITORY # this will use the env var
          account_id: $AWS_ECR_REGISTRY_ID
          extra_build_args: >-
            --build-arg APP_BUILD_DATE=${APP_BUILD_DATE}
            --build-arg APP_BUILD_TAG=${CIRCLE_SHA1}
            --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1}
            --build-arg APP_BRANCH_NAME=${CIRCLE_BRANCH}

  e2e-test-branch:
    executor: crime-forms-end-to-end-tests/e2e-test-executor
    steps:
      - crime-forms-end-to-end-tests/run-e2e-tests:
          e2e_current_image_var: NSCC_APPSTORE_IMAGE
          e2e_current_image: ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com/${APPSTORE_ECR_REPOSITORY}:branch-${CIRCLE_SHA1}
          e2e_branch: main # Change to work against a fixed e2e test repo branch if needed

  deploy-dev:
    executor: cloud-platform-executor
    steps:
      - deploy_to_environment:
          environment: development

  deploy-uat:
    executor: cloud-platform-executor
    steps:
      - deploy_to_environment:
          environment: uat
      - slack/notify:
          channel: laa-non-standard-crime-claims-preprod-alerts
          event: fail
          template: basic_fail_1

  deploy-prod:
    executor: cloud-platform-executor
    steps:
      - deploy_to_environment:
          environment: production
      - slack/notify:
          channel: laa-non-standard-crime-claims-prod-alerts
          event: fail
          template: basic_fail_1

  configure-dashboards:
    executor: cloud-platform-executor
    steps:
      - checkout
      - *authenticate_k8s
      - run:
          name: Apply dashboard config
          command: |
            kubectl apply -f ./helm_deploy/dashboards/

workflows:
  version: 2

  test-opened-pr:
    jobs:
      - lint-app:
          filters:
            branches:
              ignore:
                - main
      - test-app:
          filters:
            branches:
              ignore:
                - main
      - scan-docker-image:
          filters:
            branches:
              ignore:
                - main
      - scan-metabase-docker-image:
          filters:
            branches:
              ignore:
                - main

  build-and-deploy-open-pr:
    jobs:
      - build-and-push:
          filters:
            branches:
              ignore:
                - main
      - e2e-test-branch:
          context: laa-crime-forms-e2e-tests
          requires:
            - build-and-push
          filters:
            branches:
              ignore:
                - main
      - deploy-dev:
          context: laa-crime-application-store-dev
          filters:
            branches:
              ignore:
                - main
          requires:
            - build-and-push

  test-build-deploy-merged-pr:
    jobs:
      - lint-app:
          filters:
            branches:
              only:
                - main
      - test-app:
          filters:
            branches:
              only:
                - main
      - scan-docker-image:
          filters:
            branches:
              only:
                - main
      - scan-metabase-docker-image:
          filters:
            branches:
              only:
                - main
      - build-and-push:
          requires:
            - lint-app
            - test-app
            - scan-docker-image
      - deploy-dev:
          context: laa-crime-application-store-dev
          requires:
              - build-and-push
      - deploy-uat:
          context:
            - laa-non-standard-crime-claims-alerting
            - laa-crime-application-store-uat
          requires:
            - build-and-push
          filters:
              branches:
                  only:
                      - main
      - deploy-prod:
          context:
            - laa-non-standard-crime-claims-alerting
            - laa-crime-application-store-prod
          filters:
            branches:
              only:
                - main
          requires:
            - deploy-uat
      - configure-dashboards:
          context: laa-crime-application-store-prod
          filters:
            branches:
              only:
                - main
