version: 2.1

orbs:
  newman: postman/newman@1.0.0
  snyk: snyk/snyk@1.1.2
  aws-cli: circleci/aws-cli@4.1.3 # use v4 of this orb
  aws-ecr: circleci/aws-ecr@9.0.2 # this orb doesn't support OIDC v2, so we use aws-cli to authenticate

references:
  _save-requirements: &save-requirements
    save_cache:
      key: deps-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      paths:
        - ".venv"

  _restore-requirements: &restore-requirements
    restore_cache:
      keys:
        - deps-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
        - deps-{{ .Branch }}

  _install-requirements: &install-requirements
    run:
      name: Install Requirements
      command: pipenv install --dev

executors:
  build-image-executor:
    resource_class: small
    docker:
      - image: cimg/python:3.12.1

  cloud-platform-executor:
    resource_class: small
    docker:
      - image: ministryofjustice/cloud-platform-tools
        environment:
          GITHUB_TEAM_NAME_SLUG: laa-assess-a-claim
          REPO_NAME: laa-court-data-api

  test-executor:
    docker:
      - image: cimg/python:3.12.1
        environment:
          POSTGRES_USERNAME: postgres
          POSTGRES_PASSWORD: circleci
          POSTGRES_NAME: laa_crime_application_store
          POSTGRES_HOSTNAME: 127.0.0.1
          TZ: Europe/London
      - image: cimg/postgres:14.9
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: "circleci"
          POSTGRES_DB: laa_crime_application_store_test

commands:
  install-requirements:
    steps:
      - *restore-requirements
      - *install-requirements
      - *save-requirements

  run-tests:
    steps:
      - run:
          name: Run pytest
          command: pipenv run pytest --cov-report term --junitxml=test-results/junit.xml --cov=laa_crime_application_store_app tests
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: coverage

  run-linting:
    steps:
      - run:
          name: Check styling
          command: pipenv run flake8

  build-docker-image:
    steps:
      - run:
          name: Compile Docker Image
          command: |
              docker build \
                --build-arg BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z) \
                --build-arg COMMIT_ID=${CIRCLE_SHA1} \
                --build-arg BUILD_TAG="app-${CIRCLE_SHA1}" \
                --build-arg APP_BRANCH=${CIRCLE_BRANCH} \
                --pull \
                --tag app \
                --file Dockerfile .

  deploy_to_environment:
    description: >
      Deploy image to the specified environment
    parameters:
      environment:
        description: Name of environment to deploy to
        type: string
      registry:
        description: Location of ECR Images
        type: string
        default: ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com
    steps:
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME
          region: $ECR_REGION
      - checkout
      - run:
          name: Authenticate K8s
          command: |
              echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./ca.crt
              kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=${K8S_CLUSTER_NAME}
              kubectl config set-credentials circleci --token=${K8S_TOKEN}
              kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_NAMESPACE}
              kubectl config use-context ${K8S_CLUSTER_NAME}
              kubectl --namespace=${K8S_NAMESPACE} get pods
      - deploy:
            name: Deploy to << parameters.environment >>
            command: |
              ./bin/deploy << parameters.environment >>

jobs:
  lint-app:
    executor: build-image-executor
    parallelism:
    steps:
      - checkout
      - install-requirements
      - run-linting

  test-app:
    executor: test-executor
    parallelism: 1
    steps:
      - checkout
      - install-requirements
      - run-tests

  scan-docker-image:
    executor: build-image-executor
    parallelism: 1
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - build-docker-image
      - snyk/scan:
          token-variable: SNYK_TOKEN
          docker-image-name: app
          target-file: ./Dockerfile
          organization: 'legal-aid-agency'
          project: ministryofjustice/laa-crime-application-store
          severity-threshold: "high"
          fail-on-issues: true

  build-and-push:
    executor: aws-ecr/default # use the aws-ecr/default executor to start the docker daemon
    steps:
      - checkout
      # Authenticate to AWS using OIDC v2 with the AWS CLI
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME
          region: $ECR_REGION
      # Authenticate to the ECR repository using the standard command
      - run: |
          aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com
      - run:
          name: Set ECR_TAGS environment variable for use in next step
          command: |
            [[ "$CIRCLE_BRANCH" == "main" ]] && ECR_TAGS="main-$CIRCLE_SHA1,latest" || ECR_TAGS="branch-$CIRCLE_SHA1"
            echo "export ECR_TAGS=$ECR_TAGS" >> "$BASH_ENV"
            echo "export APP_BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z)" >> "$BASH_ENV"
            source "$BASH_ENV"
      # Build and push your Docker image
      - aws-ecr/build_image:
          push_image: true
          tag: ${ECR_TAGS}
          region: $ECR_REGION # this will use the env var
          repo: $ECR_REPOSITORY # this will use the env var
          account_id: $AWS_ECR_REGISTRY_ID
          extra-build-args: >-
            --build-arg BUILD_DATE=${APP_BUILD_DATE}
            --build-arg BUILD_TAG=${CIRCLE_SHA1}
            --build-arg COMMIT_ID=${CIRCLE_SHA1}
            --build-arg APP_BRANCH=${CIRCLE_BRANCH}

  deploy-dev:
    executor: cloud-platform-executor
    steps:
      - deploy_to_environment:
          environment: development

  deploy-uat:
    executor: cloud-platform-executor
    steps:
      - deploy_to_environment:
          environment: uat

  deploy-prod:
    executor: cloud-platform-executor
    steps:
      - deploy_to_environment:
          environment: production

  postman-test:
    executor: newman/postman-newman-docker
    steps:
      - checkout
      - newman/newman-run:
          collection: ./postman/collections/Ping.postman_collection.json
          environment: ./postman/environments/${K8S_ENV}.postman_environment.json
      - newman/newman-run:
          collection: ./postman/collections/Application.postman_collection.json
          environment: ./postman/environments/${K8S_ENV}.postman_environment.json
          additional-options: --env-var="tenantId=${ENTRA_TENANT_ID}" --env-var="applicationId=${ENTRA_APP_ID}" --env-var="applicationSecret=${ENTRA_APP_SECRET}"

workflows:
  version: 2

  test:
    jobs:
      - lint-app:
          filters:
            branches:
              ignore:
                - main
      - test-app:
          filters:
            branches:
              ignore:
                - main
      - scan-docker-image:
          filters:
            branches:
              ignore:
                - main

  build-and-deploy:
    jobs:
      - build-and-push: {}
      - deploy-dev:
          context: laa-crime-application-store-dev
          requires:
            - build-and-push
      - postman-test:
          name: dev postman tests
          context: laa-crime-application-store-dev
          requires:
            - deploy-dev
      - hold-uat:
          type: approval
          requires:
            - build-and-push
          filters:
            branches:
              only:
                - mainx
      - deploy-uat:
          context: laa-crime-application-store-uat
          requires:
            - hold-uat
          filters:
            branches:
              only:
                - main
      - postman-test:
          name: uat postman tests
          context: laa-crime-application-store-uat
          requires:
            - deploy-uat
          filters:
            branches:
              only:
                - main

  test-build-deploy-main:
    jobs:
      - lint-app:
          filters:
            branches:
              only:
                - main
      - test-app:
          filters:
            branches:
              only:
                - main
      - scan-docker-image:
          filters:
            branches:
              only:
                - main
      - build-and-push:
          requires:
            - lint-app
            - test-app
            - scan-docker-image
      - hold-dev:
          type: approval
          requires:
            - build-and-push
      - deploy-dev:
          context: laa-crime-application-store-dev
          requires:
            - hold-dev
      - postman-test:
          name: dev postman tests
          context: laa-crime-application-store-dev
          requires:
            - deploy-dev
      - hold-uat:
          type: approval
          requires:
            - build-and-push
      - deploy-uat:
          context: laa-crime-application-store-uat
          requires:
            - hold-uat
      - postman-test:
          name: uat postman tests
          context: laa-crime-application-store-uat
          requires:
            - deploy-uat
      - hold-prod:
          type: approval
          requires:
            - build-and-push
      - deploy-prod:
          context: laa-crime-application-store-prod
          requires:
            - hold-prod
